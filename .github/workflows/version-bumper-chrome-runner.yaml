name: "[chrome-runner] Check for new base image tags and bump"

on:
  schedule:
    - cron: '0 12 * * *' # Run every day at noon
  workflow_dispatch: # Allows manual triggering

jobs:
  check_new_tag:
    name: Check tag and bump
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to get access to the build_from file
    - name: Checkout repository
      uses: actions/checkout@v3

    # Install yq for parsing the YAML file
    - name: Install yq
      run: sudo add-apt-repository ppa:rmescandon/yq && sudo apt-get update && sudo apt-get install -y yq jq

    # Extract the current tag from the `build.yaml` file for aarch64 and amd64
    - name: Read current tags from build.yaml
      id: read_tags
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        CURRENT_AARCH64_TAG=$(yq e '.build_from.aarch64' ./chrome-runner/build.yaml | sed 's/.*://')
        CURRENT_AMD64_TAG=$(yq e '.build_from.amd64' ./chrome-runner/build.yaml | sed 's/.*://')

        echo "Current aarch64 tag: $CURRENT_AARCH64_TAG"
        echo "Current amd64 tag: $CURRENT_AMD64_TAG"

        echo "::set-output name=current_aarch64::$CURRENT_AARCH64_TAG"
        echo "::set-output name=current_amd64::$CURRENT_AMD64_TAG"

    # Check the latest available tag from ghcr.io for aarch64
    - name: Check latest tag for aarch64
      id: latest_aarch64
      run: |
        curl -s -H "Authorization: Bearer $GITHUB_TOKEN" https://ghcr.io/v2/zenika/alpine-chrome/tags/list
        LATEST_TAG=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" https://ghcr.io/v2/zenika/alpine-chrome/tags/list | jq -r '.tags[]' | sort -V | tail -n 1)

        # Check if the latest tag is empty
        if [ -z "$LATEST_TAG" ]; then
          echo "Error: No tags found or latest tag is empty. Aborting."
          exit 1
        fi

        echo "Latest tag: $LATEST_TAG"
        echo "::set-output name=latest_tag::$LATEST_TAG"

    # Compare the tags for aarch64
    - name: Compare aarch64 tags
      if: steps.latest_aarch64.outputs.latest_tag != steps.read_tags.outputs.current_aarch64
      run: |
        echo "New tag available for aarch64: ${{ steps.latest_aarch64.outputs.latest_tag }}"

    # Check the latest available tag for amd64
    - name: Check latest tag for amd64
      id: latest_amd64
      run: |
        LATEST_TAG=$(curl -s https://ghcr.io/v2/zenika/alpine-chrome/tags/list | jq -r '.tags[]' | sort -V | tail -n 1)
        echo "Latest tag: $LATEST_TAG"
        echo "::set-output name=latest_tag::$LATEST_TAG"

    # Compare the tags for amd64
    - name: Compare amd64 tags
      if: steps.latest_amd64.outputs.latest_tag != steps.read_tags.outputs.current_amd64
      run: |
        echo "New tag available for amd64: ${{ steps.latest_amd64.outputs.latest_tag }}"

    # Update the `build.yaml` file with the new tag if a newer one is found (for auto-updating)
    - name: Update build.yaml file
      id: update_build
      if: steps.latest_aarch64.outputs.latest_tag != steps.read_tags.outputs.current_aarch64 || steps.latest_amd64.outputs.latest_tag != steps.read_tags.outputs.current_amd64
      run: |
        sed -i "s/aarch64: .*/aarch64: ghcr.io\/zenika\/alpine-chrome:${{ steps.latest_aarch64.outputs.latest_tag }}/" ./chrome-runner/build.yaml
        sed -i "s/amd64: .*/amd64: ghcr.io\/zenika\/alpine-chrome:${{ steps.latest_amd64.outputs.latest_tag }}/" ./chrome-runner/build.yaml

    # Extract the current version from config.yaml
    - name: Read current version from config.yaml
      id: read_version
      run: |
        CURRENT_VERSION=$(yq e '.version' ./chrome-runner/config.yaml | sed 's/"//g')
        echo "Current version: $CURRENT_VERSION"
        echo "::set-output name=current_version::$CURRENT_VERSION"

      # Bump the minor version in the config.yaml file
    - name: Bump minor version
      id: bump_version
      run: |
        # Extract major, minor, patch version
        MAJOR=$(echo "${{ steps.read_version.outputs.current_version }}" | cut -d. -f1)
        MINOR=$(echo "${{ steps.read_version.outputs.current_version }}" | cut -d. -f2)
        PATCH=$(echo "${{ steps.read_version.outputs.current_version }}" | cut -d. -f3 | sed 's/[a-zA-Z].*//')

        # Bump the minor version
        NEW_MINOR=$((MINOR+1))
        NEW_VERSION="${MAJOR}.${NEW_MINOR}.0"

        echo "New version: $NEW_VERSION"
        echo "::set-output name=new_version::$NEW_VERSION"

        # Update the version in config.yaml
        yq e -i ".version = \"$NEW_VERSION\"" ./chrome-runner/config.yaml

    # Update the changelog with the new version and Docker tag change
    - name: Update CHANGELOG
      if: steps.latest_aarch64.outputs.latest_tag != steps.read_tags.outputs.current_aarch64 && steps.latest_amd64.outputs.latest_tag != steps.read_tags.outputs.current_amd64
      run: |
        NEW_ENTRY="## $NEW_VERSION\n\n- Update base image tags to (aarch64:${{ steps.latest_aarch64.outputs.latest_tag }} amd64:${{ steps.latest_amd64.outputs.latest_tag }})\n\n"
          
        # Prepend the new entry to the CHANGELOG
        { echo -e "$NEW_ENTRY"; cat ./chrome-runner/CHANGELOG.md; } > changelog_temp.md && mv changelog_temp.md ./chrome-runner/CHANGELOG.md


    # Commit and push the updated `build.yaml`, `config.yaml` and `CHANGELOG.md` file
    - name: Commit changes
      if: steps.latest_aarch64.outputs.latest_tag != steps.read_tags.outputs.current_aarch64 && steps.latest_amd64.outputs.latest_tag != steps.read_tags.outputs.current_amd64 && steps.bump_version.outputs.new_version
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"
        git add chrome-runner
        git commit -m "Bump chrome-runner to ``\n - New base image tag (aarch64:${{ steps.latest_aarch64.outputs.latest_tag }}, amd64: ${{ steps.latest_amd64.outputs.latest_tag }})"
        # git push
